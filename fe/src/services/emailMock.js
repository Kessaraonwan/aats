// Lightweight mock of email service used by the frontend when backend/email provider is not available
// Exports the same surface used in the app: EmailService class, emailTemplates and verifyEmailSetup

export const emailTemplates = {
  applicationSubmitted: {
    subject: (jobTitle) => `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô: ${jobTitle}`,
    html: (data) => `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
        <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${data.candidateName},</p>
        <p>‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á <strong>${data.jobTitle}</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
        <p>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${data.applicationId}</p>
      </div>
    `,
  },

  statusUpdate: {
    subject: (status) => `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô: ${status}`,
    html: (data) => `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">üîî ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h2>
        <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${data.candidateName},</p>
        <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á <strong>${data.jobTitle}</strong> ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á</p>
      </div>
    `,
  },

  interviewInvitation: {
    subject: () => `‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô`,
    html: (data) => `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #16a34a;">üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</h2>
        <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${data.candidateName},</p>
        <p>‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á <strong>${data.jobTitle}</strong></p>
      </div>
    `,
  },

  offerLetter: {
    subject: (jobTitle) => `‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏á‡∏≤‡∏ô: ${jobTitle}`,
    html: (data) => `<p>‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${data.candidateName}</p>`,
  },

  applicationRejected: {
    subject: () => `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à`,
    html: (data) => `<p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${data.candidateName}, ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</p>`,
  },

  newApplicationNotification: {
    subject: (jobTitle) => `[HR] ‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà: ${jobTitle}`,
    html: (data) => `<p>‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${data.jobTitle}</p>`,
  },

  pendingEvaluationNotification: {
    subject: (count) => `[HM] ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ${count} ‡∏Ñ‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô`,
    html: (data) => `<p>‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</p>`,
  },
};

export class EmailService {
  constructor() {
    // noop
  }

  async send({ to, subject, html, attachments = [] }) {
    // Frontend mock: log and return success in test mode
    // Keep behavior consistent with previous provider (returns { success, messageId, mode })
    // eslint-disable-next-line no-console
    console.log('[email mock] send', { to, subject });
    return {
      success: true,
      messageId: 'mock-' + Date.now(),
      mode: 'test',
    };
  }

  async sendApplicationSubmitted(data) {
    const template = emailTemplates.applicationSubmitted;
    return this.send({
      to: data.candidateEmail,
      subject: typeof template.subject === 'function' ? template.subject(data.jobTitle) : template.subject,
      html: template.html(data),
    });
  }

  async sendStatusUpdate(data) {
    const template = emailTemplates.statusUpdate;
    return this.send({
      to: data.candidateEmail,
      subject: typeof template.subject === 'function' ? template.subject(data.statusLabel) : template.subject,
      html: template.html(data),
    });
  }

  async sendInterviewInvitation(data) {
    const template = emailTemplates.interviewInvitation;
    return this.send({
      to: data.candidateEmail,
      subject: typeof template.subject === 'function' ? template.subject() : template.subject,
      html: template.html(data),
    });
  }

  async sendOfferLetter(data) {
    const template = emailTemplates.offerLetter;
    return this.send({
      to: data.candidateEmail,
      subject: typeof template.subject === 'function' ? template.subject(data.jobTitle) : template.subject,
      html: template.html(data),
      attachments: data.offerDocument ? [{ filename: 'offer-letter.pdf', path: data.offerDocument }] : [],
    });
  }

  async sendApplicationRejected(data) {
    const template = emailTemplates.applicationRejected;
    return this.send({
      to: data.candidateEmail,
      subject: typeof template.subject === 'function' ? template.subject() : template.subject,
      html: template.html(data),
    });
  }

  async notifyHRNewApplication(data) {
    const template = emailTemplates.newApplicationNotification;
    return this.send({
      to: data.hrEmail,
      subject: typeof template.subject === 'function' ? template.subject(data.jobTitle) : template.subject,
      html: template.html(data),
    });
  }

  async notifyHMPendingEvaluation(data) {
    const template = emailTemplates.pendingEvaluationNotification;
    return this.send({
      to: data.managerEmail,
      subject: typeof template.subject === 'function' ? template.subject(data.applicantCount) : template.subject,
      html: template.html(data),
    });
  }
}

export async function verifyEmailSetup() {
  // Always report test-mode in the frontend mock
  return {
    configured: false,
    message: 'Email provider not configured (frontend mock)',
    mode: 'test',
  };
}

export default EmailService;
